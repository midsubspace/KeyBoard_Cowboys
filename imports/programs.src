A.programs={}
A.local_shit=function(shell=null)
    if typeof(shell)==null then shell=A.sessions.current
    core.req_shell(shell)
    A.dropzone=null
    if A.protected.indexOf(shell.host_computer.public_ip)!=null then ;user_input(core.text("color","#FFFFFF")+"You Are Trying To Use Commands On  A Protected System!",0,1);return;end if
    s=shell
    if typeof(shell)=="shell" then c=s.host_computer
    A.shared_payload("create",shell)
    if A.dropzone==null then return
    bat=A.bat
    if A.debug==1 then print core.text("color","#FFFFFF")+bat.path
    if A.debug==1 then print core.text("color","#FFFFFF")+typeof(bat)
    s=A.hardware_server.scp("/root/lib/metaxploit.so",A.dropzone.path,shell)
    sr=bat.set_content("meta=include_lib("""+A.dropzone.path+"/metaxploit.so"")"+char(10)+"get_custom_object[""local_meta""]=meta"+char(10)+"get_custom_object[""local_switch""]=get_switch"+char(10)+"get_custom_object[""local_router""]=get_router"+char(10)+"get_custom_object[""local_rshell""]=include_lib(""/lib/librshell.so"")"+char(10)+"exit")
    if typeof(sr) == "string" then
        user_input("There was an error while setting file content 21: " + sr)
     else
        br=shell.build(A.dropzone.path+"/"+A.payload_name+".src",A.dropzone.path)
        if br != "" then
            user_input("There was an error while compiling at "+A.dropzone.path+": " + br)
         else
            bat.set_content(A.log_msg)
            shell.launch(A.dropzone.path+"/"+A.payload_name)
            A.sessions.local_object={"local_meta":get_custom_object["local_meta"],"local_router":get_custom_object["local_router"],"local_rshell":get_custom_object["local_rshell"]}
         end if
        end if
        if A.sessions.local_object.len>0 then
            if typeof(A.sessions.local_object["local_meta"])!="MetaxploitLib" then;user_input(core.text("color","#AA0000")+"Failed Getting Local Meta");else;print (core.text("color","#FFFFFF")+"Got Local Meta");end if
            if typeof(A.sessions.local_object["local_router"])!="router" then;user_input(core.text("color","#AA0000")+"Failed Getting Local Router");else;print (core.text("color","#FFFFFF")+"Got Local Router");end if
            if A.debug!=1 then clear_screen
        end if
        A.shared_payload("clean")
end function
A.programs.logs={"name":"logs","desc":"Clears the logs of a system if ran as "+core.text("color","#AA0000")+"Root","usg":"XXX","req":"file"}
A.programs.logs.run=function(object=null)
    objects=["file","shell","computer","number"]
    if object==null or typeof(object)=="list" then object=A.sessions.current
    if typeof(object)=="file" then
        file=object
        fake_log=null
        while file.name!="/"
            file=file.parent
        end while
        access="guest"
        for folder in file.get_folders
            if folder.name=="root" and folder.has_permission("w") then access="root"
        end for
        if access=="root" then
            for folder in file.get_folders
                if folder.name=="etc" then 
                    for file in folder.get_files
                        if file.name=="fstab" and file.has_permission("w") then fake_log=file
                    end for
                end if
            end for
        end if
        if typeof(fake_log)=="file" then
            fake_log.set_content(A.log_msg)
            fake_log.copy("/var","system.log")
            return 1
        else
            print core.text("color","#FFFFFF")+"logs:Failed to clear log with object-"+typeof(object)
            return 0
        end if
    else if typeof(object)=="computer" then
        if object.File("/root").has_permission("w") then
            object.touch("/root","system.log")
            object.File("/root/system.log").set_content(A.log_msg)
            object.File("/root/system.log").move("/var","system.log")
        end if
        if object.File("/var/system.log").size.val!=0 then;return 0;else;return 1;end if
    else if typeof(object)=="shell" then
        if object.host_computer.File("/root").has_permission("w") then
            object.host_computer.touch("/root","system.log")
            object.host_computer.File("/root/system.log").set_content(A.log_msg)
            object.host_computer.File("/root/system.log").move("/var","system.log")
            if object.host_computer.File("/var/system.log").get_content!=A.log_msg then user_input(core.text("color","#AA0000")+"LOG WAS NOT CLEARED: "+object.host_computer.public_ip)
        end if
        if object.host_computer.File("/var/system.log").size.val!=0 then;return 0;else;return 1;end if
    end if
end function
A.shared_exploit_DB=function(mode="load",mlib=null,m=null,value=null)
    A.computer.create_folder(A.ram.path,"exploits")
    DB_dir=A.computer.File(A.ram.path+"/exploits")
    if not DB_dir then A.computer.create_folder(A.ram.path,"exploits")
    DB_dir=A.computer.File(A.ram.path+"/exploits")
    if mode=="save" then
        fldm=0
        flim=0
        for folder in DB_dir.get_folders
            if folder.name==mlib.lib_name then
                fldm=1
                for file in folder.get_files
                    if file.name==mlib.version then
                        flim=1
                        if file.get_content=="" then
                            file.set_content(m+":"+value)
                        else if file.get_content.split(char(10)).indexOf(m+":"+value)==null then
                            file.set_content(file.get_content+char(10)+m+":"+value)
                        end if
                    end if
                    if A.mode=="mp" then wait 0.1
                end for
            end if
        end for
        if fldm==0 then A.computer.create_folder(DB_dir.path,mlib.lib_name)
        if flim==0 then 
            A.computer.touch(DB_dir.path+"/"+mlib.lib_name,mlib.version)
            file=A.computer.File(DB_dir.path+"/"+mlib.lib_name+"/"+mlib.version)
            file.set_content(m+":"+value)
        end if
    else
        fldm=0
        flim=0
        found=[]
        for folder in DB_dir.get_folders
            if folder.name==mlib.lib_name then
                fldm=1
                for file in folder.get_files
                    if file.name==mlib.version then
                        flim=1
                        lines=file.get_content.split(char(10))
                        for line in lines
                            if line=="" then continue
                            if line.split(":").len!=2 then continue
                            found.push(line)
                        end for
                    end if
                    if A.mode=="mp" then wait 0.1
                end for
            end if
        end for
        return found
    end if
end function
A.shared_hack=function(mlib=null,third="$",metaxploit=null)
    if metaxploit==null then metaxploit=A.meta
    found=A.shared_exploit_DB("load",mlib)
    if not found or found ==[""] then 
        mem=metaxploit.scan(mlib)
        for m in mem
            add=metaxploit.scan_address(mlib,m).split("Unsafe check: ")
            for a in add
                if a==add[0] then continue
                value=a[a.indexOf("<b>")+3:a.indexOf("</b>")]
                value=value.replace(char(10),"")
                if A.debug==1 then print core.text("color","#FBFF00")+"m:"+m+"-"+"value:"+value
                A.shared_exploit_DB("save",mlib,m,value)
                result=mlib.overflow(m,value,third)
                if result and typeof(result)!="null" then A.results.push(result)
            end for
        end for
    else
        for f in found
            m=f.split(":")[0]
            value=f.split(":")[1]
            result=mlib.overflow(m,value,third)
            if result and typeof(result)!="null" then A.results.push(result)
        end for
    end if
end function
A.shared_wordlist=function
    A.wordbanks["0"]=[]
    if not A.computer.File(A.ram.path+"/wordlists") then;A.computer.create_folder(A.ram.path,"wordlists");A.computer.touch(A.ram.path+"/wordlists","wordlist0");end if
    files=A.computer.File(A.ram.path+"/wordlists").get_files
    for file in files
        for word in file.get_content.split(char(10))
            A.wordbanks["0"].push(word)
        end for
    end for
end function
A.shared_payload=function(mode="create",object=null)
    create=function(object)
        if typeof(object)!="shell" then return
        if A.debug!=0 then print "Creating Payload"
        if object==null then object=A.sessions.current
        
        temp=core.find(object.host_computer.File("/"))
        A.payload_name="dcall"
        A.dropzone=null
        for folder in temp.folders
            if A.dropzone!=null then continue
            if folder.has_permission("w") then A.dropzone=folder
        end for
        if A.dropzone==null then return
        object.host_computer.touch(A.dropzone.path,A.payload_name+".src")
        if A.debug==1 then user_input(core.text("color","#FFFFFF")+"Dropzone Path:"+A.dropzone.path,0,1)
        batch_file=object.host_computer.File(A.dropzone.path+"/"+A.payload_name+".src")
        if typeof(batch_file)=="file" then A.bat=batch_file
        if A.debug!=0 then print "Payload Created"
    end function
    clean=function(object)
        if typeof(object)!="shell" then return
        oldpath=A.dropzone.path
        batch_file=object.host_computer.File(oldpath+"/"+A.payload_name+".src")
        if batch_file and batch_file.is_binary==0 and batch_file.is_folder==0 then batch_file.set_content("")
        temp=core.find(object.host_computer.File("/"))
        A.dropzone=null
        for folder in temp.folders
            if folder.has_permission("w") then A.dropzone=folder
        end for
        if batch_file then 
            batch_file.move(A.dropzone.path,A.payload_name)
            batch_file.move(oldpath,A.payload_name)
            if object.host_computer.File("/etc").has_permission("w") then
                temp=core.find(object.host_computer.File("/"))
                A.dropzone=null
                for folder in temp.folders
                    if folder.has_permission("w") then A.dropzone=folder
                end for
                object.host_computer.File(oldpath+"/"+A.payload_name).move(A.dropzone.path,"fstab")
                object.host_computer.File(A.dropzone.path+"/fstab").move("/etc","fstab")
            else
                if object.host_computer.File("/home/guest/Config").has_permission("w") then
                    object.host_computer.File(oldpath+"/"+A.payload_name).move("/home/guest/Config","Mail.txt")
                    object.host_computer.File("/home/guest/Config/Mail.txt").set_content("Roffmannse@grealogyec.org:811b20e42628c5d10d707bb60300b8d1")
                end if
            end if
        end if
    end function
    if mode=="create" then
        if object==null then object=A.sessions.current
        if typeof(object)!="shell" then return
        create(object)
    else
        if object==null then object=A.sessions.current
        if typeof(object)!="shell" then return
        clean(object)
    end if
end function

A.programs.info={"name":"info","desc":"Prints system infomation","usg":"XXX","req":"file"}
A.programs.info.run=function(params)
    if A.debug!=1 then clear_screen;hide=1;if A.debug==1 and A.stream==0 then hide=0
    print core.text("color","#FFFFFF")+"Imported Player Config File";print core.text("color","#FFFFFF")+"Imported "+core.len+" Core Function(s)";print core.text("color","#FFFFFF")+"Imported "+A.programs.len+" Custom Command(s)";print core.text("color","#FFFFFF")+"Imported "+cmds.programs.len+" Terminal Command(s)";print core.text("color","#FFFFFF")+"GUID:"+core.text("color","#FBFF00")+A.RID;print core.text("color","#FFFFFF")+"System Time:"+core.get_date.month+"-"+core.get_date.day+"-"+core.get_date.year+" "+core.get_date.time;print core.text("color","#FFFFFF")+"This Version is valid until:"+core.text("color","#FBFF00")+A.exp_date.month+"-"+A.exp_date.day+"-"+A.exp_date.year;print core.text("color","#FFFFFF")+"Thank You For Using "+core.text("color","#FBFF00")+program_path.split("/").pop;print core.text("color","#FFFFFF")+"Created By: "+core.text("color","#FBFF00")+"me";print core.text("color","#FFFFFF")+"You Are Running Version: "+core.text("color","#FBFF00")+A.version
    if params.len==1 then A.cycle
    if params.len>0 and params[1]=="-show" then;hide=0;print core.text("color","#FFFFFF")+"Imported Player Config File";print core.text("color","#FFFFFF")+"Imported "+core.len+" Core Function(s)";print core.text("color","#FFFFFF")+"Imported "+A.programs.len+" Custom Command(s)";print core.text("color","#FFFFFF")+"Imported "+cmds.programs.len+" Terminal Command(s)";print core.text("color","#FFFFFF")+"GUID:"+core.text("color","#FBFF00")+A.RID;print core.text("color","#FFFFFF")+"System Time:"+core.get_date.month+"-"+core.get_date.day+"-"+core.get_date.year+" "+core.get_date.time;print core.text("color","#FFFFFF")+"This Version is valid until:"+core.text("color","#FBFF00")+A.exp_date.month+"-"+A.exp_date.day+"-"+A.exp_date.year;print core.text("color","#FFFFFF")+"Thank You For Using "+core.text("color","#FBFF00")+program_path.split("/").pop;print core.text("color","#FFFFFF")+"Created By: "+core.text("color","#FBFF00")+"me";print core.text("color","#FFFFFF")+"You Are Running Version: "+core.text("color","#FBFF00")+A.version;end if
    if A.computer.is_network_active==0 then;print core.text("color","#FFFFFF")+"INTERNET STATUS: "+core.text("color","#AA0000")+"Offline";else;print core.text("color","#FFFFFF")+"INTERNET STATUS: "+core.text("color","#00ED03")+"Online";end if
    if A.server_type=="remote" then;print core.text("color","#FFFFFF")+"WAREHOUSE STATUS: "+core.text("color","#00ED03")+"Remote";if hide==0 then print core.text("color","#FFFFFF")+"WareHouse IP: "+core.text("color","#FBFF00")+A.remote_server.host_computer.public_ip+char(10)+core.text("color","#FFFFFF")+"DATA PATH:"+A.ram.path;else;print core.text("color","#FFFFFF")+"SERVER STATUS: "+core.text("color","#00ED03")+"Local";end if
    if typeof(A.reshell_server)=="shell" then;print core.text("color","#FFFFFF")+"GATEWAY STATUS:"+core.text("color","#00ED03")+"Online";if hide==0 then print core.text("color","#FFFFFF")+"Gateway IP:"+core.text("color","#FBFF00")+A.reshell_server.host_computer.public_ip;else;print core.text("color","#FFFFFF")+"GATEWAY SERVER:"+core.text("color","#AA0000")+"Offline";end if
    if typeof(A.hardware_server)=="shell" then;print core.text("color","#FFFFFF")+"HARDWARE STATUS: "+core.text("color","#00ED03")+"Remote";if hide==0 then print core.text("color","#FFFFFF")+"HardWare IP: "+core.text("color","#FBFF00")+A.hardware_server.host_computer.public_ip;else;print core.text("color","#FFFFFF")+"HARDWARE STATUS: "+core.text("color","#00ED03")+"Local";end if
    tor_total=0
    if A.computer.File(A.ram.path+"/tor") and A.computer.File(A.ram.path+"/tor/nodes") then
        if A.computer.File(A.ram.path+"/tor/nodes").get_content!="" then tor_total=A.computer.File(A.ram.path+"/tor/nodes").get_content.split(char(10)).len
        if A.computer.File(A.ram.path+"/tor") and A.computer.File(A.ram.path+"/tor/nodes") then;print core.text("color","#FFFFFF")+"Tor Nodes:"+core.text("color","#FBFF00")+tor_total;end if
    end if
    pwd_total=0
    wordlists=A.computer.File(A.ram.path+"/wordlists")
    if not wordlists or wordlists.get_files.len==0 then
        pwd_total=0
    else
        for file in wordlists.get_files
            for line in file.get_content.split(char(10))
                if line!="" then pwd_total=pwd_total+1
            end for
        end for
    end if
    print core.text("color","#FFFFFF")+"PASSWORDS LOADED: "+core.text("color","#FBFF00")+pwd_total
    if A.computer.File(A.ram.path+"/exploits") then
        exp_total=0;exploits=A.computer.File(A.ram.path+"/exploits")
        if not exploits or exploits.get_folders.len==0 then
            wait 0.1
        else
            for folder in exploits.get_folders
                for file in folder.get_files
                    for line in file.get_content.split(char(10))
                        if line=="" then continue
                        exp_total=exp_total+1
                    end for
                end for
            end for
        end if
        print core.text("color","#FFFFFF")+"Exploits Loaded in database: "+core.text("color","#FBFF00")+exp_total
    end if
    if A.computer.File(A.ram.path+"/email.sql") then
        nmail_total=0;nmail_file=A.computer.File(A.ram.path+"/email.sql");nmail_total=nmail_file.get_content.split(char(10)).len
        print core.text("color","#FFFFFF")+"Registered Email Accounts: "+core.text("color","#FBFF00")+nmail_total
    end if
    if A.computer.File(A.ram.path+"/server.sql") then
        nserver_total=0;nservers_file=A.computer.File(A.ram.path+"/server.sql");if not nservers_file then;nserver_total=0;else;nserver_total=nservers_file.get_content.split(char(10)).len;end if
        print core.text("color","#FFFFFF")+"NPC Servers: "+core.text("color","#FBFF00")+nserver_total
    end if
    if typeof(A.meta)=="MetaxploitLib" then;print core.text("color","#FFFFFF")+"Metaxploit Status: "+core.text("color","#00ED03")+A.meta_type;else;print core.text("color","#FFFFFF")+"Metaxploit Status: "+core.text("color","#AA0000")+"Missing";end if
    if typeof(A.crypto)=="cryptoLib" then;print core.text("color","#FFFFFF")+"Crypto Status: "+core.text("color","#00ED03")+A.crypto_type;else;print core.text("color","#FFFFFF")+"Crypto Status: "+core.text("color","#AA0000")+"Missing";end if
    if A.hackshop!="" then;print core.text("color","#FFFFFF")+"HACKSHOP: "+core.text("color","#00ED03")+"Connected";if hide==0 then print core.text("color","#FFFFFF")+"HACKSHOP IP: "+A.hackshop;else;print core.text("color","#FFFFFF")+"HACKSHOP: "+core.text("color","#AA0000")+"Disconnected";end if
end function
A.programs.scanlan={"name":"scanlan","desc":"Scan Local Network For Devices(Planned)","usg":"XXX","req":"shell"}
A.programs.scanlan.run=function(params)
end function
A.programs.local={"name":"local","desc":"Hacks libs in /lib","usg":"XXX","req":"shell"}
A.programs.local.run=function(params)//TODO test
    core.req_shell(A.sessions.current)
    A.results=[]
    A.local_shit(A.sessions.current)
    A.hack_mode="local"
    A.computer.create_folder(A.ram.path,"exploits")
    if not A.sessions.current.host_computer.File(A.dropzone.path+"/metaxploit.so") then s=A.hardware_server.scp("/root/lib/metaxploit.so",A.dropzone.path,A.sessions.current)
    local_meta=A.sessions.local_object["local_meta"]
    A.MetaLibs=[]
    if typeof(local_meta)!="MetaxploitLib" then;print core.text("color","#FFFFFF")+"local:Metaxploit not found please run 'update [local]'";A.cycle;end if
    local_nmap=function
        c=A.sessions.current.host_computer
        data="# Service Version"
        libs=[]
        for file in c.File("/lib").get_files;print file.path;libs.push(file.path);end for
        n=0
        for lib in libs
            metalib=local_meta.load(lib)
            if typeof(metalib)=="MetaLib" then
                A.MetaLibs.push(metalib)
                data=data+char(10)+n+" "+metalib.lib_name+" "+metalib.version
                n+=1
            end if
        end for
        router=A.sessions.local_object["local_router"]
        print core.text("color","#FFFFFF")+"ESSID:"+core.text("color","#FBFF00")+router.essid_name+core.text("color","#FFFFFF")+"("+core.text("color","#FBFF00")+router.bssid_name+core.text("color","#FFFFFF")+")"
        print core.text("color","#FFFFFF")+"Public IP:"+router.public_ip+" Private IP:"+router.local_ip
        print core.format(data)
        return libs
    end function
    if A.automate_root!=1 then
        options=["one","all"]
        opt=core.menu(options)
        opt="all"
        if opt=="one" then
            libs=local_nmap
            opt=user_input("Hack:").val
            A.MetaLibs=[local_meta.load(libs[opt])]
        else
            local_nmap
        end if
        if user_input("'F'all or 'B'ounce?").lower=="b" then;third=user_input("Lan:");else;third="$";if user_input("Pwds y/n> ")=="y" then third=A.password;end if
    else
        local_nmap
        third="$"
    end if
    A.results=[]
    for metalib in A.MetaLibs
        if A.debug==1 then print core.text("color","#003AFF")+typeof(metalib+":"+metalib.lib_name)
        if typeof(metalib)!="MetaLib" then continue
        A.shared_hack(metalib,third)
    end for
    if A.results.len>0 then A.object_sorter
end function
A.programs.find={"name":"core.find","desc":"Find Files and Folders on a system","usg":"Search_Term","req":"file"}
A.programs.find.run=function(params)//TODO test
    if params.len==3 then
        term=params[1]
        mode=params[2]
    else if params.len==2 then
        term=params[1]
        mode=0
    else
        print core.text("color","#FFFFFF")+"core.find:"+A.programs.find.usg
        A.cycle
    end if
    metalibs={}
    cryptolibs={}
    rshell_libs={}
    found_files=[]
    found_folders=[]
    search_files=function(folder,term)
        for file in folder.get_files
            if term=="crypto" or term=="metaxploit" or term=="librshell" then
                if file.path.split("/").pop.split("\.")[0]==term then
                    found_files.push(file.path)
                end if
            else
                if file.name==term then 
                    found_files.push(file.path)
                end if
            end if
        end for
    end function
    search_folders=function(folder,term)
        for folder in folder.get_folders          
            if folder.name==term then
                found_folders.push(folder.path)
            end if
            search_files(folder,term)
            search_folders(folder,term)
        end for
    end function
    search_folders(get_shell.host_computer.File("/"),term)
    if (mode==1 and (term=="metaxploit" or term=="crypto" or term=="librshell")) then
        if  found_files.len!=0 then
            return(true)
        else
            return(false)
        end if
    end if
    if term=="metaxploit" and found_files.len!=0 then
        for file in found_files
            if metalibs.indexOf(file)==null then
                meta_path=file
                meta=include_lib(file)
                version=meta.load(file).version
                metalibs[file]=version
            end if
        end for
        for meta in metalibs
            metalibs[meta.key]=meta.value.replace("\.", "").to_int
        end for
        highest=""
        vote=0
        for item in metalibs
            if item.value>vote then
                vote=item.value
                winner=item.key
            end if
        end for
        return(winner)
    end if
    if term=="crypto" and typeof(A.meta)=="MetaxploitLib" then
        for file in found_files
            if cryptolibs.indexOf(file)==null then
                crypto_path=file
                crypto=include_lib(file)
                version=A.meta.load(file).version
                cryptolibs[file]=version
            end if
        end for
        for crypto in cryptolibs
            cryptolibs[crypto.key]=crypto.value.replace("\.", "").to_int
        end for
        highest=""
        vote=0
        for item in cryptolibs
            if item.value>vote then
                vote=item.value
                winner=item.key
            end if
        end for
        return(winner)
    else if term=="crypto" then
        return(found_files[0])
    end if
    if term=="librshell" and typeof(A.meta)=="MetaxploitLib" then
        for file in found_files
            if rshell_libs.indexOf(file)==null then
                rshell_path=file
                rshell=include_lib(file)
                version=A.meta.load(file).version
                rshell_libs[file]=version
            end if
        end for
        for rshell in rshell_libs
            rshell_libs[rshell.key]=rshell.value.replace("\.", "").to_int
        end for
        highest=""
        vote=0
        for item in rshell_libs
            if item.value>vote then
                vote=item.value
                winner=item.key
            end if
        end for
        return(winner)
    else if term=="librshell" then
        return(found_files[0])
    end if
    if found_folders.len!=0 then
        if found_folders.len>1 then
            num=1
            for folder in found_folders
                print(num+")"+folder)
                num=num+1
            end for
            choice=user_input("Pick A.folder location to use:").to_int
            while choice>found_folders.len
                choice=user_input("Pick A.folder location to use:").to_int
            end while
            while choice<found_folders.len
                choice=user_input("Pick A.folder location to use:").to_int
            end while
            return(found_folders[choice-1])
        else
            return(found_folders[0])
        end if
    end if
    if found_files.len!=0 then
        if found_files.len>1 and term!="aptclient.so" and term!="metaxploit"  then
            num=1
            for file in found_files
                print(num+")"+file)
                num=num+1
            end for
            choice=user_input("Pick A.folder location to use:").to_int
            return(found_files[choice-1])
        else
            return(found_files[0])
        end if
    end if   
end function
A.programs.update={"name":"update","desc":"Update Libs","usg":"XXX","req":"file"}
A.programs.update.run=function(params)
    if params.len==3 then
        mode=params[1]
        location=params[2]
    else if params.len==2 then
        mode=params[1]
        location=null
    else
        mode="local"
        location=null
    end if
    r=get_shell.host_computer.create_folder(current_path, "lib")
    A.server.scp("/root/lib/aptclient.so",current_path+"/lib",get_shell)
    aptlib=include_lib(A.programs.find.run("aptclient.so"))
    if A.hackshop==null then A.programs.find.run(1)
    aptlib.add_repo(A.hackshop)
    if A.debug==1 then aptlib.update
    package_list = ["metaxploit.so", "crypto.so","librshell.so","librshell.so"]
    if mode!="server" then
        if location==null then 
            location=current_path
        else
            location=A.dropzone.path
        end if
        computer=A.sessions.current.host_computer
        if A.debug==1 then print "Local Mode"
        for package in package_list
            r=computer.create_folder(location, "lib")
            if typeof(r) == "string" and A.debug==1 then
                print("There was A. error when creating the folder: " + r)
            else if A.debug==1 then
                print("Folder got created")
            end if
            lib_folder = location + "/lib"
            if computer.File(lib_folder + "/" + package) == null then
                aptlib.install(package, lib_folder)
                print("Installed:" + package)
                if A.meta == null and A.programs.find.run("metaxploit",1)==true then
                    A.meta = include_lib(A.programs.find.run("metaxploit",0))
                end if
                if A.crypto == null and A.programs.find.run("crypto",1)==true then
                    A.crypto = include_lib(A.programs.find.run("crypto",0))
                end if
            else if aptlib.check_upgrade(lib_folder + "/" + package) == 1 then
                aptlib.install(package, lib_folder)
                if A.debug==1 then print core.text("color","#AA0000")+"Upgraded "+package
                if A.meta == null and A.programs.find.run("metaxploit",1)==true then
                    A.meta = include_lib(A.programs.find.run("metaxploit",0))
                end if
                if A.crypto == null and A.programs.find.run("crypto",1)==true then
                    A.crypto = include_lib(A.programs.find.run("crypto",0))
                end if
            else
                if A.debug==1 then print("No Updates for " + package)
            end if
        end for
    else
        A.hardware_server.launch("/root/getlibs")
        if A.debug==1 then  print("Updated Server Libs")
    end if
end function
A.programs.nmap={"name":"nmap","desc":"Scans the Ports On A Network","usg":"IP","req":"file"}
A.programs.nmap.run=function(params)//TODO test
    if params.len!=2 then;print core.text("color","#FFFFFF")+"nmap:No Address Given";A.cycle;end if
    ip=params[1]
    if not is_valid_ip(ip) then ip=nslookup(ip)
    if not is_valid_ip(ip) then;print core.text("color","#FFFFFF")+"nmap:Given Address:"+params[1]+" Is not valid!";A.cycle;end if
    if is_lan_ip(ip) then
        A.local_shit(A.sessions.current)
        router=A.sessions.local_object["local_router"]
    else
        router=get_router(ip)
    end if
    if router==null then;print core.text("color","#FFFFFF")+"nmap:Router Does Not Exist On "+params[1];A.cycle;end if
    if is_lan_ip(ip) then
        ports=router.device_ports(ip)
    else
        ports=router.used_ports
    end if
    if ports==null then;print core.text("color","#FFFFFF")+"nmap:No Ports Found On "+params[1];A.cycle;end if 
    if typeof(ports)=="string" then;print core.text("color","#FFFFFF")+"nmap:Error Getting Ports:"+ports;A.cycle;end if
    if ports.len==0 then;print core.text("color","#FBFF00")+"Scan Finished, No Open Ports Found"+char(10)+"You can only hack port 0";end if
    firewall_map=function(ip)
        firewalls=router.firewall_rules
        rules={}
        n=0
        if firewalls.len>0 then
            print core.text("color","#AA0000")+"Firewalls on: "+ip
            data=core.text("color","#FFFFFF")+"ACTION PORT SOURCE DESTINATION"
            while firewalls.len>0
                rules[n]=firewalls.pop
                n=n+1
            end while
            n=0
            while rules.len!=0
                t=rules[n]
                fire=t.split(" ")
                if fire[0]=="ALLOW" then
                    fire.remove(0)
                    fire.reverse
                    fire.push("ALLOW")
                    fire.reverse
                    action = fire[0]
                    port = fire[1]
                    source = fire[2]
                    going = fire[3]
                    data=data+char(10)+core.text("color","#00ED03")+action+" "+port+" "+source+" "+going
                else if fire[0]=="DENY" then
                    fire.remove(0)
                    fire.reverse
                    fire.push("DENY")
                    fire.reverse
                    action = fire[0]
                    port = fire[1]
                    source = fire[2]
                    going = fire[3]
                    data=data+char(10)+core.text("color","#AA0000")+action+" "+port+" "+source+" "+going
                end if
                rules.remove(n)
                n=n+1
            end while
            print core.format(data)
        end if
        //wait 0.1
    end function
    placeholder="placeholder"
    data=core.text("color","#FFFFFF")+"PORT SERVICE STATUS VERSION LAN"
    print(core.text("color","#FFFFFF")+"ESSID: " + core.text("color","#FBFF00")+router.essid_name+"(" + core.text("color","#FBFF00")+router.bssid_name + ")")
    print(core.text("color","#FFFFFF")+"Public IP:<b> "+core.text("color","#FBFF00")+router.public_ip+core.text("color","#FFFFFF")+"</b> Private IP: <b>"+core.text("color","#FBFF00")+router.local_ip+"</b>")
    whois=whois(router.public_ip).split(char(10))
    for line in whois
        if line=="[Neurobox Network]" then;print core.text("color","#FFFFFF")+line;continue;end if
        print core.text("color","#FFFFFF")+line.split(":")[0]+":"+core.text("color","#FBFF00")+line.split(":")[1]
    end for
    print(core.text("color","#FFFFFF")+"Kernel_Router.so Version: "+core.text("color","#FBFF00")+router.kernel_version)
    for port in ports
        service = router.port_info(port)
        service_name = service.split(" ")[0]
        if service_name == "students" or service_name == "employees" or service_name == "police" then service_name = "sql"
        service_version = service.split(" ")[1]
        service = service.split(" ")
        port_status = core.text("color","#00ED03")+"OPEN"
        if ((port.is_closed) and not is_lan_ip(ip)) then port_status = core.text("color","#AA0000")+"CLOSED"
        data = data + char(10) + port.port_number + " " + service[0] + " " + port_status + " " + service[1] + " " + port.get_lan_ip
    end for
    firewall_map(ip)
    A.computer.create_folder(A.ram.path,"ip_logs")
    A.computer.touch(A.ram.path+"/ip_logs", "nmap")
    nmap_log=A.computer.File(A.ram.path + "/ip_logs/nmap")
    lines=nmap_log.get_content.split(char(10))
    if nmap_log.get_content=="" then
        nmap_log.set_content(ip)
    else if lines.indexOf(ip)==null then
        nmap_log.set_content(nmap_log.get_content + (char(10)) + ip)
    end if
    print(char(10) + core.format(data))
    return(ip)
end function
A.programs.ip={"name":"ip","desc":"Generates a Random IP","usg":"mode[*] num_of_ports[*]","req":"file"}
A.programs.ip.run=function(params)//TODO test
    mode="gen"
    if params.len==2 then
        mode=params[1]
    end if
    ip_gen=function
        ip=[floor((rnd*256)),floor((rnd*256)),floor((rnd*256)),floor((rnd*256))].join(".")
        A.computer.create_folder(A.ram.path,"ip_logs")
        A.computer.touch(A.ram.path+"/ip_logs", "ipgen")
        ipgen_log=A.computer.File(A.ram.path + "/ip_logs/ipgen")
        lines=ipgen_log.get_content.split(char(10))
        for line in lines
            if line==ip then ip_gen
        end for
        return ip
    end function
    ip=ip_gen
    while not is_valid_ip(ip)
        ip=ip_gen
    end while
    router=get_router(ip)
    while router==null or typeof(router)==null or whois(ip)=="Address not found!"
        ip=ip_gen
        router=get_router(ip)
        if A.mode=="mp" then wait 0.1
    end while
    ipgen_log=A.computer.File(A.ram.path + "/ip_logs/ipgen")
    lines=ipgen_log.get_content.split(char(10))
    if ipgen_log.get_content=="" then
        ipgen_log.set_content(ip)
    else if lines.indexOf(ip)==null then
        ipgen_log.set_content(ipgen_log.get_content + (char(10)) + ip)
    end if
    if mode=="gen" then
        return ip
    else if mode=="nmap" then 
        A.programs.nmap.run(["nmap",ip])
    else if mode=="hack" then
        A.programs.hack.run(["hack",ip])
    else
        return ip
    end if
end function
A.object_sorter=function(ip)//TODO test
    know_root=0
    A.object_ip=ip
    shells_access={};shells=[];computers=[];computers_access={};files=[];files_access={};numbers=[]
    for result in A.results
        if typeof(result)=="shell" then;shells.push(result);else if typeof(result)=="computer" then;computers.push(result);else if typeof(result)=="file" then;files.push(result);else if typeof(result)=="number" then;numbers.push(result);end if
    end for
    n=0
    for shell in shells
        shells_access[shell+":"+n]=core.check_user(shell)+":"+shell.host_computer.local_ip
        if core.check_user(shell)!="guest" then A.programs.nmail.run(["nmail","add",shell])
        if core.check_user(shell)!="guest" and know_root==0 then
            if shell.host_computer.File("/etc/passwd") and shell.host_computer.File("/etc/passwd").has_permission("r") and shell.host_computer.File("/etc/passwd").get_content!="" then
                if A.programs.rainbow.run(["rainbow","hash",0,0,shell.host_computer.File("/etc/passwd").get_content.split(char(10))[0].split(":")[1]])!=null then know_root=1
            end if
        end if
        n+=1
    end for
    n=0
    for computer in computers
        computers_access[computer+":"+n]=core.check_user(computer)+":"+computer.local_ip
        if core.check_user(computer)!="guest" then A.programs.nmail.run(["nmail","add",computer])
        if core.check_user(computer)!="guest" and know_root==0 then
            if computer.File("/etc/passwd") and computer.File("/etc/passwd").has_permission("r") and computer.File("/etc/passwd").get_content!="" then
                if A.programs.rainbow.run(["rainbow","hash",0,0,computer.File("/etc/passwd").get_content.split(char(10))[0].split(":")[1]])!=null then know_root=1
            end if
        end if
        n+=1
    end for
    n=0
    for file in files
        files_access[file+":"+n]=core.check_user(file)
        if core.check_user(file)!="guest" and know_root==0 then
            while file.name!="/"
                file=file.parent
            end while
            for folder in file.get_folders
                if folder.name=="etc" then
                    for file in folder.get_files
                        if file.name=="passwd" and file.has_permission("r") and file.get_content!="" then
                            if A.programs.rainbow.run(["rainbow","hash",0,0,file.get_content.split(char(10))[0].split(":")[1]])!=null then know_root=1
                        end if
                    end for
                end if
            end for
        end if
        n+=1
    end for
    n=0
    options=[]
    if shells.len>0 then;print core.text("color","#FFFFFF")+"Shells:"+core.text("color","#D700FF")+shells.len;options.push("shell");end if
    if computers.len>0 then;print core.text("color","#FFFFFF")+"Computers:"+core.text("color","#D700FF")+computers.len;options.push("computer");end if
    if files.len>0 then;print core.text("color","#FFFFFF")+"Files:"+core.text("color","#D700FF")+files.len;options.push("file");end if
    if numbers.len>0 then print core.text("color","#FFFFFF")+"Password Changes:"+core.text("color","#D700FF")+numbers.len
    print core.text("color","#FFFFFF")+"Public IP:"+ip
    type=core.menu(options)
    if A.debug!=1 then clear_screen
    if type=="shell" and shells_access.len!=0 then
        if shells_access.len!=0 then
            n=0
            for shell in shells_access
                print n+")"+shell.values[1]
                n=n+1
            end for
        end if
        r=user_input("Which Shell: ")
        if r=="back" then
            if A.debug!=1 then clear_screen
            A.object_sorter(ip)
        else
            result=shells[r.val]
        end if
    else if type=="computer" and computers_access.len!=0 then
        if computers_access.len!=0 then
            n=0
            for computer in computers_access
                print n+") Computer:"+computer.values[1]
                n=n+1
            end for
        end if
        r=user_input("Which Computer: ")
        if r=="back" then
            if A.debug!=1 then clear_screen
            A.object_sorter(ip)
        else
            result=computers[r.val]
        end if
    else if type=="file" and files_access.len!=0 then
        if files_access.len!=0 then
            n=0
            for file in files_access
                print n+") File:"+file.values[1]
                n=n+1
            end for
        end if
        r=user_input("Which File: ")
        if r=="back" then
            if A.debug!=1 then clear_screen
            A.object_sorter(ip)
        else
            result=files[r.val]
        end if
    else
        if A.debug!=1 then clear_screen
        A.object_sorter(ip)
    end if
    A.sessions.current=result
    A.cycle
end function
A.programs.hack={"name":"hack","desc":"Remotly Hack a System","usg":"ip_address","req":"file"}
A.programs.hack.run=function(params)//TODO test
    if A.debug!=1 then clear_screen
    ip=A.programs.nmap.run(["nmap",params[1]])
    target_port=null
    if params.len>2 then target_port=params[2]
    A.hack_mode="remote"
    if is_lan_ip(ip) then
        A.local_shit(A.sessions.current)
        router=A.sessions.local_object["local_router"]
        ports=router.device_ports(ip)
        local=1
    else
        router=get_router(ip)
        ports=router.used_ports
        local=0
    end if
    if target_port==null then
        options=["hack a port","hack all ports"]
        port_nums=[0]
        clean=0
        for port in ports
            if port.is_closed==false then port_nums.push(port.port_number)
        end for
        action=core.menu(options)
        if action=="hack a port" then
            target_port=user_input(core.text("color","#FFFFFF")+"Port# ")
        else if action=="hack all ports" and ports.len!=0 then
            A.programs.auto_hack.run(["auto_hack",ip])
            A.cycle
        end if
    end if
    A.results=[]
    if local==1 then
        if not A.sessions.current.host_computer.File(A.dropzone.path+"/metaxploit.so") then s=A.hardware_server.scp("/root/lib/metaxploit.so",A.dropzone.path,A.sessions.current)
        local_meta=A.sessions.local_object["local_meta"]
        net_session=local_meta.net_use(ip,target_port.val)
        if not net_session then user_input(core.text("color","#AA0000")+typeof(net_session)+":"+typeof(A.meta)+":"+typeof(A.fake_meta),0,1)
    else
        if A.fake_meta!=null then
            net_session=A.fake_meta.net_use(ip,target_port.val)
        else
            net_session=A.meta.net_use(ip,target_port.val)
        end if
        if not net_session then user_input(core.text("color","#AA0000")+typeof(net_session)+":"+typeof(A.meta)+":"+typeof(A.fake_meta),0,1)
    end if
    admin_online=net_session.is_root_active_user;users_active=net_session.is_any_active_user;num_of_users=net_session.get_num_users;num_port_for=net_session.get_num_portforward;num_conn_gateways=net_session.get_num_conn_gateway
    if admin_online!=false then user_input(core.text("color","#AA0000")+"ROOT IS ONLINE!!!!",0,1)
    metalib=net_session.dump_lib
    if target_port=="0" then third=user_input("LAN IP:'*' ")
    third=user_input("Change Password? 'yes' ")
    if third=="yes" then;third=A.password;else;third="$";end if
    A.shared_hack(metalib,third)
    if A.results.len>0 then 
        A.object_sorter(ip)
    else 
        print core.text("color","#FFFFFF")+A.results
        print core.text("color","#AA0000")+"No Results Found"
        A.cycle
    end if
end function
A.programs.auto_hack={"name":"auto_hack","desc":"Hacks All Ports On a Target","usg":"ip_address","req":"file"}
A.programs.auto_hack.run=function(params)//TODO test
    ip=params[1]
    if params.len>2 then
        mode=params[2]
    else
        mode="hack"
    end if
    clean=0
    if mode!="ascan" then 
        if user_input("Consult Database? 'yes' or 'no' ")=="no" then clean=1
    end if
    A.results=[]
    if is_lan_ip(ip) then
        router=A.sessions.local_object["local_router"]
        ports=router.device_ports(ip)
        local=1
    else
        router=get_router(ip)
        ports=router.used_ports
        local=0
    end if
    port_nums=[0]
    for port in ports
        if port.is_closed==false then port_nums.push(port.port_number)
    end for
    metaxploit=A.meta
    if mode!="hack" then 
        password="$"
    else
        password_change=user_input("PWD? y or n ").lower
    end if
    for item in port_nums
        if local==1 then
            if not A.sessions.current.host_computer.File(A.dropzone.path+"/metaxploit.so") then s=A.hardware_server.scp("/root/lib/metaxploit.so",A.dropzone.path,A.sessions.current)
            A.local_shit
            local_meta=A.sessions.local_object["local_meta"]
            net_session=local_meta.net_use(ip,item)
            if not net_session then ;print core.text("color","#AA0000")+"Err: no connection to net session";continue;end if
        else
            if A.fake_meta!=null then 
                net_session=A.fake_meta.net_use(ip,item)
            else
                net_session=A.meta.net_use(ip,item)
            end if
            if not net_session then ;print core.text("color","#AA0000")+"Err: no connection to net session";continue;end if
        end if
        admin_online=net_session.is_root_active_user;users_active=net_session.is_any_active_user;num_of_users=net_session.get_num_users;num_port_for=net_session.get_num_portforward;num_conn_gateways=net_session.get_num_conn_gateway
        if admin_online!=false then user_input(core.text("color","#AA0000")+"ROOT IS ONLINE!!!!",0,1)
        metalib=net_session.dump_lib
        third=A.password
        if password_change!="y" and password_change!="yes" then third="$%$%$%$"
        A.shared_hack(metalib,third)
    end for
    if mode!="scan" and mode!="ascan" then 
        if A.results.len>0 then A.object_sorter(ip)
    else
        print core.text("color","#FFFFFF")+"Scan Completed!"
    end if
end function
A.programs.addons={"name":"addons","desc":"Launches The Addons Menu","usg":"mode[l,u] target","req":"shell"}
A.programs.addons.run=function(params)//TODO test
    if params.len==3 then
        mode=params[1]
        target=params[2]
    else if params.len==2 then
        mode=params[1]
        target=null
    else
        mode="l"
        target=null
    end if
    core.req_shell(A.sessions.current)
    A.local_shit(A.sessions.current)
    addon_folder=A.computer.File(A.ram.path+"/programs")
    programs=[]
    action=null
    for file in addon_folder.get_files
        programs.push(file)
    end for
    n=0
    if mode.lower=="-u" then
        if target==null then target=user_input("File Name:")
        for file in get_shell.host_computer.File("/root").get_files
            if file.name.lower==target.lower then
                r=get_shell.scp("/root/"+target,addon_folder.path,A.server)
                if typeof(r)=="string" then
                    print core.text("color","#FFFFFF")+"There was an error when uploading "+target+":"+r
                    A.cycle
                else
                    print core.text("color","#FFFFFF")+"File:"+file.name+" has been added to the warehouse"
                    file.delete
                    A.programs.addons.run(["addons","l",target])
                end if
            end if
        end for
    else
        if target==null then
            print core.text("color","#FFFFFF")+"Addon Launcher:"
            for file in programs
                print n+")"+file.name
                n+=1
            end for
            action=user_input(core.text("color","#FFFFFF")+"Launch#").val
        else
            n=0
            for i in programs
                if i.name==target then action=n
                n+=1
            end for
            if action==null then;print core.text("color","#FFFFFF")+target+" Not A Valid Addon!";A.cycle;end if
        end if
    end if
    if typeof(A.server)=="shell" then get_custom_object["server"]=A.server
    get_custom_object["home_shell"]=get_shell
    get_custom_object["home_computer"]=get_shell.host_computer
    if typeof(A.meta)=="MetaxploitLib" then get_custom_object["meta"]=A.meta
    if typeof(A.crypto)=="CryptoLib" then get_custom_object["crypto"]=A.crypto
    get_custom_object["ram"]=A.ram
    get_custom_object["local_shell"]=A.sessions.current
    get_custom_object["local_computer"]=A.sessions.current.host_computer
    get_custom_object["computer"]=A.sessions.current.host_computer
    get_custom_object["shell"]=A.sessions.current
    get_custom_object["local_meta"]=A.sessions.local_object["local_meta"]
    get_custom_object["local_router"]=A.sessions.local_object["local_router"]
    get_custom_object["game_mode"]=A.mode
    get_custom_object["mail_pwd"]=A.mail_pass
    get_custom_object["pmail"]=user_mail_address
    program=programs[action]
    A.server.launch(program.path)
end function
A.programs.root={"name":"root","desc":"Try To Gain Root Access","usg":"XXX","req":"shell"}
A.programs.root.run=function(params)//TODO test
    if params.len==2 then
        shell=params[1]
    else
        shell=A.sessions.current
    end if
    core.req_shell(shell)
    A.local_shit(A.sessions.current)
    if A.dropzone==null then ;print "root:A.dropzone is null";A.cycle;end if
    n=1
    c=shell.host_computer
    shitbook=A.wordbanks["0"]
    if shitbook==[] then 
        A.shared_hack
        shitbook=A.wordbanks["0"]
    end if
    pwd_total=A.wordbanks["0"].len
    if c.File(A.dropzone.path).has_permission("w") then
        A.shared_payload("create")
        bat=A.bat
        file=A.bat
        if not file then;print core.text("color","#FFFFFF")+"root:Unable to create payload at "+A.dropzone.path+"/"+A.payload_name+".src";A.cycle;end if
        if file then file.set_content("user=get_custom_object[""sudo_user""]"+char(10)+"password=get_custom_object[""sudo_password""]"+char(10)+"shell=get_shell(user,password)"+char(10)+"if typeof(shell)==""shell"" then"+char(10)+"get_custom_object[""sudo_shell""]=shell"+char(10)+"else"+char(10)+"get_custom_object[""sudo_shell""]=null"+char(10)+"end if")
        buildResult = shell.build(A.dropzone.path+"/"+A.payload_name+".src",A.dropzone.path)
    end if
    pwd_file=c.File("/etc/passwd")
    if pwd_file and pwd_file.has_permission("r") and pwd_file.get_content!="" then
        if A.debug==1 then print pwd_file.get_content.split(char(10))[0].split(":")[1]
        core.stopwatch("start")
        pwd=A.programs.rainbow.run(["rainbow","hash",0,0,pwd_file.get_content.split(char(10))[0].split(":")[1]])
        if pwd!=null then
            get_custom_object["sudo_user"]="root"
            get_custom_object["sudo_password"]=pwd
            get_custom_object["sudo_shell"]=null
            shell.launch(A.dropzone.path+"/"+A.payload_name)
            if get_custom_object["sudo_shell"]!=null then 
                A.sessions.current=get_custom_object["sudo_shell"]
                core.stopwatch("stop","to get root access")
                A.shared_payload("clean")
                A.cycle
            end if
        end if
    end if
    print core.text("color","#FFFFFF")+"Attempting to gain "+core.text("color","#AA0000")+"Root"+core.text("color","#FFFFFF")+" Access By Force"
    core.stopwatch("start")
    print shitbook
    core.stop
    for line in shitbook
        if A.mode=="mp" then
            print(core.text("color","#FFFFFF")+pwd_total)
        else
            print "Gone Fishing",1
        end if
        get_custom_object["sudo_user"]="root"
        get_custom_object["sudo_password"]=line
        shell.launch(A.dropzone.path+"/"+A.payload_name)
        r=null
        if get_custom_object["sudo_shell"]!=null then r=get_custom_object["sudo_shell"]
        if typeof(r)=="shell" then
            A.sessions.current=r
            core.stopwatch("stop","to get root access")
            A.shared_payload("clean")
            A.cycle
        end if
        if not shell.host_computer.File("/home") then;print core.text("color","#FFFFFF")+"root:/Home Not Found!";A.cycle;end if
        for user in shell.host_computer.File("/home").get_folders
            if user=="guest" then continue
            get_custom_object["sudo_user"]=user.name
            get_custom_object["sudo_password"]=line
            shell.launch(A.dropzone.path+"/"+A.payload_name)
            r=null
            if get_custom_object["sudo_shell"]!=null then r=get_custom_object["sudo_shell"]
            if typeof(r)=="shell" then
                pwd_file=r.host_computer.File("/etc/passwd")
                if pwd_file and pwd_file.has_permission("r") and pwd_file.get_content!="" then
                    pwd=A.programs.rainbow.run(["rainbow","hash",0,0,pwd_file.get_content.split(char(10))[0].split(":")[1]])
                    if pwd!=null then
                        get_custom_object["sudo_user"]="root"
                        get_custom_object["sudo_password"]=pwd
                        get_custom_object["sudo_shell"]=null
                        shell.launch(A.dropzone+"/sudo")
                        if get_custom_object["sudo_shell"]!=null then
                            A.sessions.current=get_custom_object["sudo_shell"]
                            endtime=core.convert_time(time-starttime)
                            print core.text("color","#FFFFFF")+"It took "+endtime["hour"]+" Hour(s):"+endtime["min"]+" Min(s):"+endtime["sec"]+" Sec(s) to get root access"
                            A.shared_payload("clean")
                            A.cycle
                        end if
                    end if
                end if
            end if
        end for
        pwd_total-=1
    end for
    n+=1
    print core.text("color","#FFFFFF")+"root:Failed to elevate to root by force!"+char(10)+core.text("color","#FFFFFF")+"Now going to try hacking it"
    A.automate_root=1
    //A.programs.local.run
    A.automate_root=0
    endtime=core.convert_time(time-A.startime)
    print core.text("color","#FFFFFF")+"It took "+endtime["hour"]+" Hour(s):"+endtime["min"]+" Min(s):"+endtime["sec"]+" Sec(s) to fail getting root access"
    A.cycle
end function
A.programs.gui={"name":"gui","desc":"Install GUI Tools","usg":"XXX","req":"shell"}
A.programs.gui.run=function(params)//TODO test
    core.req_shell(A.sessions.current)
    n=0
    if not A.computer.File("/usr/bin") then;core.text("color","#FFFFFF")+"gui:No programs found in /usr/bin in the warehouse";A.cycle;end if
    for file in A.computer.File("/usr/bin").get_files
        print n+") "+file.name
        n=n+1
    end for
    opt=user_input("Which Program To Download: ")
    if opt!="*" then 
        opt=opt.val
        file=A.computer.File("/usr/bin").get_files[opt]
        A.server.host_computer.File(file.path).chmod("o+rwx")
        A.server.host_computer.File(file.path).chmod("u+rwx")
        A.server.host_computer.File(file.path).chmod("g+rwx")
        A.server.scp(file.path,"/usr/bin",A.sessions.current)
        A.server.host_computer.File(file.path).chmod("o-rwx")
        A.server.host_computer.File(file.path).chmod("u-rwx")
        A.server.host_computer.File(file.path).chmod("g-rwx")
    else
        for file in A.computer.File("/usr/bin").get_files
            A.server.host_computer.File(file.path).chmod("o+rwx")
            A.server.host_computer.File(file.path).chmod("u+rwx")
            A.server.host_computer.File(file.path).chmod("g+rwx")
            A.server.scp(file.path,cmds.dir,A.sessions.current)
            A.server.host_computer.File(file.path).chmod("o-rwx")
            A.server.host_computer.File(file.path).chmod("u-rwx")
            A.server.host_computer.File(file.path).chmod("g-rwx")
        end for
    end if
end function
A.programs.spider={"name":"spider","desc":"Crawl Though Local Network","usg":"XXX","req":"file"}
A.programs.std={"name":"std","desc":"Infects /lib with bad libs MP ONLY","usg":"XXX","req":"shell"}
A.programs.std.run=function(params)
    core.req_shell(A.sessions.current)
    A.programs.portal.run(params)
    if  not A.sessions.current.host_computer.File("/lib").has_permission("w") then 
        print core.text("color","#FFFFFF")+"Must Have Write Perms for /lib!"
        wait 3
        A.cycle
    end if
    if A.mode=="sp" then;user_input(core.text("color","#FBFF00")+p[0].upper+"'s Can Only Be Transmitted Over Multiplayer Servers",0,1);A.cycle;end if
    bad_libs=A.computer.File(A.ram.path+"/unsafe/local").get_files
    for file in bad_libs
        A.server.scp(file.path,"/lib",A.sessions.current)
    end for
end function
A.programs.rainbow={"name":"rainbow","desc":"Search <b><i>The Library</b></i>","usg":"hash,ssh,ftp,mail,wifi ip user","req":"file"}
A.programs.rainbow.run=function(params)//TODO test
    if params.len==6 then
        mode=params[1]
        ip=params[2]
        user=params[3]
        hash=params[4]
        output=params[5]
    else if params.len==5 then
        mode=params[1]
        ip=params[2]
        user=params[3]
        hash=params[4]
        output=0
    else if params.len==4 then
        mode=params[1]
        ip=params[2]
        user=params[3]
        hash=null
        output=0
    else if params.len==3 then
        mode=params[1]
        ip=params[2]
        user="root"
        hash=null
        output=0
    else if params.len==2 then
        mode=params[1]
        ip=null
        user="root"
        output=0
    else
        print core.text("color","#FFFFFF")+"rainbow:mode[hash,ssh,ftp,mail,wifi] ip[string] user[string]"
        A.cycle
    end if
    pwd_total=A.wordbanks["0"].len
    if A.drama==1 then
        print core.text("color","#FFFFFF")+"Loading Books..."
        wait 3
        print core.text("color","#FFFFFF")+"Loaded "+pwd_total+" Books"
        wait 3
        print core.text("color","#FFFFFF")+"The Books Contain "+pwd_total+" Words"+char(10)
        print core.text("color","#FFFFFF")+"""You want weapons? We're in a library. Books are the best weapon in the world. This room's the greatest arsenal we could have. Arm yourself!"""
        wait 5
    end if
    if mode=="mail" and ip.split("@")[0]=="" then
        files=A.remote_server.host_computer.File(A.ram.path+"/userlists").get_files
        domain=null
        if ip!=null then user=ip
            domain=user
            test_account=mail_login("Notton@bottsbcvm.info","shello")
            if test_account==null or test_account=="string" then exit "Failed signing into test account!"+char(10)+test_account
            for file in files
                print core.text("color","#FBFF00")+"Scanning "+file.name
            end for
            clear_screen
            for file in files
                print core.text("color","#FBFF00")+"Scanning "+file.name
                for line in file.get_content.split(char(10))
                    pwd_total=A.shared_wordlist[0]
                    if line=="" then continue
                    for word in words
                        user=line+domain
                        print(core.text("color","#FFFFFF")+pwd_total,1)
                        test_email=mail_login(user,word)
                        if typeof(test_email)=="MetaMail" then;print core.text("color","#FFFFFF")+user+" : "+word;A.cycle;end if
                        pwd_total=pwd_total-1
                    end for
                end for
            end for
            print core.text("color","#FFFFFF")+"Failed To core.find user on "+domain;return
    end if
    for word in A.wordbanks["0"]
        if mode!="ssh" then
            if A.mode=="mp" then
                print(pwd_total,true)
            else
                print(pwd_total,true)
            end if
        end if
        if word=="" or word==" " then continue
        if mode=="ssh" then
            if typeof(A.fake_server)=="shell" then
                s=A.fake_server.connect_service(ip,22,user,word)
            else
                s=get_shell.connect_service(ip,22,user,word)
            end if
            if typeof(s)=="shell" then
                A.sessions.current=s
                A.local_shit(A.sessions.current)
                A.cycle
            end if
        else if mode=="mail" then
            if ip!=null then user=ip
            m=mail_login(user,word)
            if typeof(m)=="MetaMail" then;print core.text("color","#FFFFFF")+user+" : "+word;A.cycle;end if
        else if mode=="wifi" then
            wifi_list=get_shell.host_computer.wifi_networks(get_shell.host_computer.network_devices.split(" ")[0].trim)[0]
            network=wifi_list.split(" ")
            bssid = network[0]
            percent = network[1]
            essid = network[2]
            w=get_shell.host_computer.connect_wifi(get_shell.host_computer.network_devices.split(" ")[0].trim, bssid, essid,word)
            if typeof(w) == "string" then
                print("There was an error while connecting to new Wifi: " + w)
            else
                print core.text("color","#FFFFFF")+"Connected to new Wifi successfully.";A.cycle
            end if
        else if mode=="hash" then
            if hash==null then hash=user_input(core.text("color","#FFFFFF")+"Hash> ")
            if hash==md5(word) then
                print "Match Found>"+word
                return word
            end if
        end if
        pwd_total-=1
    end for
    if mode=="hash" then
        pwd=A.crypto.decipher(hash)  
        if pwd!=null then
            wordlist_folder=A.computer.File(A.ram.path+"/wordlists")
            if wordlist_folder.get_files==0 then exit "Wordlists not found"
            for file in wordlist_folder.get_files
                lines=file.get_content
                words = lines.split(char(10))
            end for
            words = file.get_content.split(char(10))
            word_count = []
            for word in words
                letters = word.len
                num = 0
                while num != letters
                    word_count.push(word[num])
                    num = num + 1
                end while
            end for
            if word_count.len == 160000 then
                num = wordlist_folder.get_files.len
                num = num + 1
                wordlist_file = "wordlist"+num
                computer.touch(wordlist_folder.path, wordlist_file)
                file = computer.File(wordlist_folder.path + "/" + wordlist_file)
                file.set_content(file.get_content + char(10) + pwd)
                if output==1 then print(core.text("color","#FFFFFF")+"Cracked Password> "+pwd)
                A.shared_wordlist
                return pwd
            else
                file.set_content(file.get_content + char(10) + pwd)
                if output==1 then print(core.text("color","#FFFFFF")+"Cracked Password> "+pwd)
                A.shared_wordlist
                return pwd
            end if
        else
            if output==1 then print(core.text("color","#FFFFFF")+"Unable to Crack Password:" + hash)
            return null
        end if
    end if
    print core.text("color","#ff0000")+"rainbow:Webster's Book Did Not Contain The Password!"
    A.cycle
end function
A.programs.servers={"name":"servers","desc":"Shows the Server Database","usg":"mode(v,a) object public_ip local_ip","req":"file"}
A.programs.servers.run=function(params)//TODO test
    if params.len==5 then
        mode=params[1]
        o=params[2]
        public_tar=params[3]
        local_tar=params[4]
    else if params.len==4 then
        mode=params[1]
        o=params[2]
        public_tar=params[3]
        local_tar="*"
    else if params.len==3 then
        mode=params[1]
        o=params[2]
        public_tar="*"
        local_tar="*"
    else if params.len==2 then
        mode=params[1]
        o=A.sessions.current
        public_tar="*"
        local_tar="*"
    else if params.len==1 then
        mode="v"
        o=A.sessions.current
        public_tar="*"
        local_tar="*"
    end if
    db=A.computer.File(A.ram.path+"/server.sql")
    if not db then;A.computer.touch(A.ram.path,"server.sql");db=A.computer.File(A.ram.path+"/server.sql");end if
    if db.get_content!="" then
        lines=db.get_content.split(char(10))
        scrubbed_list=[]
        for line in lines
            if scrubbed_list.indexOf(line)==null then 
                scrubbed_list.push(line)
            else
                wait 0.1
            end if
        end for
        db.set_content("")
        for item in scrubbed_list
            db.set_content(db.get_content+item+char(10))
        end for
    end if
    if mode=="v" then
        if A.stream==1 then A.stream_check("You Are About to Reveal The Winning Lottery Numbers")
        local_tar=public_tar
        public_tar=o
        data=core.text("color","#FFFFFF")+"<u>Public Local User Password"//TODO add column for if server as ssh/ftp as we can use this info to get into the system
        for line in db
            if line=="" then continue
            public=line.split(":")[0];local=line.split(":")[1];user=line.split(":")[2];pass=line.split(":")[3]
            if public==public_tar then
                if local==local_tar then
                    data=data+char(10)+core.text("color","#AA0000")+public+" "+local+" "+user+" "+pass
                else
                    data=data+char(10)+core.text("color","#FBFF00")+public+" "+local+" "+user+" "+pass
                end if
            else
                data=data+char(10)+core.text("color","#FFFFFF")+public+" "+local+" "+user+" "+pass
            end if
        end for
        print core.format(data)
    else if mode=="a" then
        if typeof(o)=="shell" then
                c=o.host_computer
                users=["root"]
                for user in c.File("/home").get_folders;users.push(user.name);end for
                for user in users
                    pwd=null
                    pwd=A.programs.get_user_pass.run([o,user,"api"])
                    if pwd!=null then
                        if db.get_content=="" then
                            db.set_content(c.public_ip+":"+c.local_ip+":"+user+":"+pwd)
                        else
                            db.set_content(db.get_content+char(10)+c.public_ip+":"+c.local_ip+":"+user+":"+pwd)
                        end if
                    end if
                end for
        else if typeof(o)=="computer" then
            c=o
            users=["root"]
            for user in c.File("/home").get_folders;users.push(user.name);end for
            for user in users
                pwd=null
                pwd=A.programs.get_user_pass.run([o,user,"api"])
                if pwd!=null and pwd!=A.password then
                    if db.get_content=="" then
                        db.set_content(c.public_ip+":"+c.local_ip+":"+user+":"+pwd)
                    else
                        db.set_content(db.get_content+char(10)+c.public_ip+":"+c.local_ip+":"+user+":"+pwd)
                    end if
                end if
            end for
        else if typeof(o)=="file" then
        end if
    else if mode=="w" then
        deletionResult = db.delete
        if typeof(deletionResult) == "string" and deletionResult.len > 0 then
        print("There was an error while deleting Database: " + deletionResult)
        else
        print("Database got deleted successfully.")
        end if
    end if
end function
A.programs.nmail={"name":"nmail","desc":"Shows the NPC Mail Database","usg":"mode[add,view] public_ip[opt] local_ip[opt]","req":"file"}//TODO ADD
A.programs.nmail.run=function(params)//test adding
    if params.len==4 then
        mode=params[1]
        public_tar=params[2]
        local_tar=params[3]
    else if params.len==3 then
        mode=params[1]
        public_tar=params[2]
        local_tar="*"
    else if params.len==2 then
        mode=params[1]
        public_tar="*"
        local_tar="*"
    else
        mode="add"
        public_tar="*"
        local_tar="*"
    end if
    if typeof(A.sessions.current)=="shell" then;if A.protected.indexOf(A.sessions.current.host_computer.public_ip)!=null then mode="view";end if
    db=A.computer.File(A.ram.path+"/email.sql")
    if not db then;A.computer.touch(A.ram.path,"email.sql");db=A.computer.File(A.ram.path+"/email.sql");end if
    add=function(db,object)
        if typeof(object)=="file" then
            file=object
            while file.name!="/"
                file=file.parent
            end while
            for folder in file.get_folders
                if folder.name=="home" then
                    for user in folder.get_folders
                        if user.has_permission("w") then
                            for folder in user.get_folders
                                if folder.name=="Config" and folder.has_permission("r") then
                                    for file in folder.get_files
                                        if file.name=="Mail.txt" and file.has_permission("r") and fole.get_content!="" then
                                            email=file.get_content.split(":")[0]
                                            pwd=file.get_content.split(":")[1]
                                            temp=[]
                                            for i in db.get_content.split(char(10))
                                                temp.push(i.split(";")[0])
                                            end for
                                            if temp.indexOf(email)==null then 
                                                pwd=A.programs.rainbow.run(["rainbow","hash",0,0,pwd,1])
                                                if pwd!=null then
                                                    if db.get_content=="" then
                                                        db.set_content(email+";"+pwd+";?;?")
                                                    else
                                                        db.set_content(db.get_content+char(10)+email+";"+pwd+";?;?")
                                                    end if
                                                end if
                                            end if
                                        end if
                                    end for
                                end if
                            end for
                        end if
                    end for
                else if folder.name=="root" then
                    for folder in folder.get_folders
                        if folder.name=="Config" and folder.has_permission("r") then
                            for file in folder.get_files
                                if file.name=="Mail.txt" and file.has_permission("r") and file.get_content!="" then
                                    email=file.get_content.split(":")[0]
                                    pwd=file.get_content.split(":")[1]
                                    temp=[]
                                    for i in db.get_content.split(char(10))
                                        temp.push(i.split(";")[0])
                                    end for
                                    if temp.indexOf(email)==null then 
                                        pwd=A.programs.rainbow.run(["rainbow","hash",0,0,pwd,1])
                                        if pwd!=null then
                                            if db.get_content=="" then
                                                db.set_content(email+":"+pwd+":?:?")
                                            else
                                                db.set_content(db.get_content+char(10)+email+":"+pwd+":?:?")
                                            end if
                                        end if
                                    end if
                                end if
                            end for
                        end if
                    end for
                end if
            end for
        else
            object=core.req_computer(object)
                if object.File("/root/Config/Mail.txt") and object.File("/root/Config/Mail.txt").has_permission("r") then
                    email=object.File("/root/Config/Mail.txt").get_content.split(":")[0]
                    pwd=object.File("/root/Config/Mail.txt").get_content.split(":")[1]
                    pwd=A.programs.rainbow.run(["rainbow","hash",0,0,pwd,1])
                    if pwd!=null then
                        if db.get_content=="" then
                            db.set_content(email+":"+pwd+":"+object.local_ip+";"+object.public_ip)
                        else
                            db.set_content(db.get_content+char(10)+email+";"+pwd+";"+object.local_ip+";"+object.public_ip)
                        end if
                    end if
                end if
                for user in object.File("/home").get_folders
                    if object.File("/home/"+user.name+"/Config/Mail.txt") then
                        if  object.File("/home/"+user.name+"/Config/Mail.txt").has_permission("r") and object.File("/home/"+user.name+"/Config/Mail.txt").get_content!="" then
                            email=object.File("/home/"+user.name+"/Config/Mail.txt").get_content.split(":")[0]
                            pwd=object.File("/home/"+user.name+"/Config/Mail.txt").get_content.split(":")[1]
                            temp=[]
                            for i in db.get_content.split(char(10))
                                temp.push(i.split(";")[0])
                            end for
                            if temp.indexOf(email)==null then 
                                pwd=A.programs.rainbow.run(["rainbow","hash",0,0,pwd,1])
                                if pwd!=null then
                                    if db.get_content=="" then
                                        db.set_content(email+";"+pwd+";"+object.local_ip+";"+object.public_ip)
                                    else
                                        db.set_content(db.get_content+char(10)+email+";"+pwd+";"+object.local_ip+";"+object.public_ip)
                                    end if
                                end if
                            end if
                        end if
                    end if
                end for
            end if
    end function
    view=function(db)
        data=core.text("color","#FFFFFF")+"<u>Email Password Public Local"
        if db.get_content!="" then
            lines=db.get_content.split(char(10))
            new_list=[]
            for line in lines
                if new_list.indexOf(line)==null then new_list.push(line)
            end for
            db.set_content("")
            for item in new_list
                if db.get_content=="" then
                    db.set_content(item)
                else
                    db.set_content(db.get_content+char(10)+item)
                end if            
            end for
        end if
        for line in db.get_content.split(char(10))
            if line=="" then continue
            email=line.split(";")[0]
            pwd=line.split(";")[1]
            local=line.split(";")[2]
            public=line.split(";")[3]
            if public==public_tar then
                if local==local_tar then
                    data=data+char(10)+core.text("color","#AA0000")+email+" "+pwd+" "+public+" "+local
                else
                    data=data+char(10)+core.text("color","#FBFF00")+email+" "+pwd+" "+public+" "+local
                end if
            else
                data=data+char(10)+core.text("color","#FFFFFF")+email+" "+pwd+" "+public+" "+local
            end if
        end for
        print core.format(data)
    end function
    if mode=="add" then
        if params.len==3 then 
            if ["shell","computer","file"].indexOf(typeof(params[2]))==null then params[2]=A.sessions.current
        else
            params.push(A.sessions.current)
        end if
        add(db,params[2])
        return
    else if mode=="view" then
        view(db)
        A.cycle
    end if
end function
A.programs.get_user_pass={"name":"get_user_pass","desc":"Decrypts /etc/passwd","usg":"object user mode","req":"file"}
A.programs.get_user_pass.run=function(params)//TODO test
end function//TODO add to servers function and trash this shit
A.programs.hackshop={"name":"hackshop","desc":"Generates Random Hackshop","usg":"XXX","req":"file"}
A.programs.hackshop.run=function(params);A.programs.webhunt.run(["webhunt","hackshop"]);end function
A.programs.portal={"name":"portal","desc":"Open a temp portal to current system","usg":"XXX","req":"shell"}
A.programs.portal.run=function(params)//TODO test
    gateway=A.reshell_server
    core.req_shell(A.sessions.current)
    if A.protected.indexOf(A.sessions.current.host_computer.public_ip)!=null then;print core.text("color","#FFFFFF")+"portal:Unable To Open Portal On Protected Server!";A.cycle;end if
    A.local_shit(A.sessions.current)
    s=A.hardware_server.scp("/root/lib/metaxploit.so",A.dropzone,A.sessions.current)
    if typeof(s) == "string" then
        exit("There was an error while sending file: " + s)
    else
        print("File got sent successfully.")
    end if
    A.local_shit(A.sessions.current)
    if A.dropzone==null then ;print "ERROR With dropzone";return;end if
    rshell_ip=gateway.host_computer.public_ip
    rshell_port=1222
    process_name=A.rshell_proc
    s=A.sessions.current
    c=s.host_computer
    A.shared_payload("create")
    file=A.bat
    file.set_content("s=get_shell"+char(10)+"c=s.host_computer"+char(10)+"meta=include_lib("""+A.dropzone.path+"/metaxploit.so"")"+char(10)+char(10)+"meta.rshell_client("""+rshell_ip+""","+rshell_port+","""+process_name+""")")
    BuildResult=s.build(A.dropzone.path+"/"+A.payload_name+".src",A.dropzone.path)
    if BuildResult !="" then
        print core.text("color","#FFFFFF")+ "There Was An Error While Compiling: "+BuildResult
        A.cycle
    else
        print "File was created"
    end if
    skip=0
    for i in s.host_computer.show_procs.split(char(10))
        if i.split(" ")[4]==process_name then skip=1
    end for
    if skip==0  then 
        s.launch(A.dropzone.path+"/"+A.payload_name)
    else
        print core.text("color","#FFFFFF")+"Only One Portal Per Device!"
        A.cycle
    end if
    A.shared_payload("clean")
end function
A.programs.gateway={"name":"portal_server","desc":"Sets up the Portal Server","usg":"XXX","req":"file"}
A.programs.gateway.run=function(params)//TODO FIX Broke
    gateway=A.reshell_server
    if typeof(gateway)!="shell" then;print core.text("color","#FFFFFF")+"portal:Unable to connect to gateway";A.cycle;end if
    A.programs.logs.run(gateway)
    if active_user=="root" then A.programs.logs.run(get_shell)
    s=A.hardware_server.scp("/root/lib/metaxploit.so","/lib",gateway)
    if typeof(s) == "string" then
        exit("There was an error while sending file: " + s)
    else
        print("File got sent successfully.")
    end if
    s=A.remote_server.scp("/root/shadow_data/safe/librshell.so","/lib",gateway)
    if typeof(s) == "string" then
        exit("There was an error while sending file: " + s)
    else
        print("File got sent successfully.")
    end if
    A.local_shit(gateway)
    rshelld=A.sessions.local_object["local_rshell"]
    if not rshelld or rshelld==null or rshelld=="null" then
        hack_shop="72.96.6.252"
        gateway.launch("/bin/apt-get", "update")
        gateway.launch("/bin/apt-get", "addrepo "+hack_shop)
        gateway.launch("/bin/apt-get", "update")
        gateway.launch("/bin/apt-get", "install librshell.so")
        A.local_shit(gateway)
        rshelld = A.sessions.local_object["local_rshell"]
    end if
    if not rshelld or rshelld==null or rshelld=="null" then;print core.text("color","#FFFFFF")+"portal:Gateway is unable to core.find rshelld";A.cycle;end if
    output = rshelld.install_service
    if output != true then;print core.text("color","#FFFFFF")+"portal:Gateway is unable to install rshelld";A.cycle;end if
    A.local_shit(gateway)
    A.shared_payload("create",gateway)
    bat=A.bat
    bat.set_content("metaxploit=include_lib(""/lib/metaxploit.so"")
    if not metaxploit then
    metaxploit=include_lib(current_path+""/metaxploit.so"")
    end if
    if not metaxploit then
    exit(""Error: Can't core.find metaxploit library in the /lib path or the current folder"")
    end if
    print(""Listening for upcoming connections..."")
    load_portals=function()
    portals=[]
    while portals.len==0
    portals=metaxploit.rshell_server
    if (typeof(portals)==""string"") then
    exit(portals)
    end if
    if (portals.len==0) then
    wait(2)
    end if
    end while
    return portals
    end function
    close_portal=function(shell)
    procs=shell.host_computer.show_procs
    list=procs.split(char(10))[1:]
    processes=[]
    for item in list
    parsedItem=item.split("" "")
    process={}
    process.user=parsedItem[0]
    process.pid=parsedItem[1]
    process.cpu=parsedItem[2]
    process.mem=parsedItem[3]
    process.command=parsedItem[4]
    processes.push(process)
    end for
    for p in processes
    print(p.command)
    end for
    process_name=""doom""
    for p in processes
    closeResult=shell.host_computer.close_program(process.pid.to_int)
    if typeof(closeResult)==""string"" then
    print(""There was an error when closing a program: ""+closeResult)
    else
    print(""Program with pid ""+p.pid+"" got successfully closed."")
    end if
    end for
    end function
    enter_portal=function(shell)
    get_custom_object[""rshell_object""]=shell
    exit
    end function
    option=0
    while true
    portals=[]
    gateways=load_portals
    n=0
    for p in gateways
    portals.push({""num"":n,""public"":p.host_computer.public_ip,""local"":p.host_computer.local_ip,""shell"":p})
    n=n+1
    end for
    for p in portals
    print(p.num+"":""+p.public+""@""+p.local)
    end for
    opt=user_input(""#"").val
    shell=portals[opt].shell
    options=[""reload"",""connect"",""close"",""exit""]
    n=0
    for o in options
    print(n+""#""+o)
    n=n+1
    end for
    opt=user_input(""#"").val
    opt=options[opt]
    if opt==""reload"" then
    load_portals
    continue
    else if opt==""connect"" then
    enter_portal(shell)
    else if opt==""close"" then
    close_portal(shell)
    else if opt==""exit"" then
    exit
    else
    load_portals
    continue
    end if
    end while")
    BR = gateway.build(A.dropzone.path+"/"+A.payload_name+".src",A.dropzone.path)
    if BR != "" then
        print(core.text("color","#FFFFFF")+"There was an error while compiling: " + BR)
        A.cycle
    else
        print(core.text("color","#FFFFFF")+"File has been compiled.")
    end if
    get_custom_object["rshell_object"]=null
    gateway.launch(A.dropzone.path+"/"+A.payload_name)
    A.shared_payload("clean",gateway)
    if get_custom_object["rshell_object"]!=null then 
        A.sessions.current=get_custom_object["rshell_object"]
        A.local_shit(A.sessions.current)
        A.cycle
    end if
end function
A.programs.wipe={"name":"wipe","desc":"Corrupts a system","usg":"XXX","req":"computer"}
A.programs.wipe.run=function(params)//TODO test
    computer=core.req_computer(A.sessions.current)
    if computer.public_ip==A.remote_server.host_computer.public_ip or computer.public_ip==A.hardware_server.host_computer.public_ip or computer.public_ip==get_shell.host_computer.public_ip then ;print core.text("color","#FFFFFF")+"You Are Trying To Use Commands On  A Protected System!";A.cycle;end if
    if computer.File("/boot") and computer.File("/boot").has_permission("w") then
    confirm = user_input(core.text("color","#AA0000")+"<b>=== 'F's In The Chat! ===\n{"+core.text("color","#FFFFFF")+computer.public_ip+core.text("cap","color")+":"+core.text("color","#FBFF00")+computer.local_ip+core.text("cap","color")+"}\n"+core.text("color","#FF8701")+"<b>** YOU CANNOT UNDO THIS ** \n--> ")
    art="                                                    
                                                         c=====e
                                                            H
   ____________                                         _,,_H__
  (__((__((___()                                       //|     |
 (__((__((___()()_____________________________________// |ACME |
(__((__((___()()()------------------------------------'  |_____|"
if confirm != "F" then ;clear_screen;print art+char(10);user_input(core.text("color","#FF8701")+"Stanislav Petrov Has Saved The World Once More!",0,1);A.cycle;end if
        renameResult=computer.File("/boot").rename(".boot")
        if typeof(renameResult) == "string" and renameResult!="" then
            print("There was an error while renaming file: " + renameResult)
        else
            print("System Corrupted")
        end if
    end if
    return
end function
A.programs.object_menu={"name":"object_menu","desc":"Returns you to the object sorter","usg":"XXX"}
A.programs.object_menu.run=function(params);if A.object_ip!=null then A.object_sorter(A.object_ip);end function
A.programs.webhunt={"name":"webhunt","desc":"Hunts Down Networks","usg":"mode(opt)[hackshop]","req":"file"}
A.programs.webhunt.run=function(params)
    if params.len==2 then
        mode=params[1]
    else if params.len==1 then
        mode="any"
    else
        print core.text("color","#FFFFFF")+"webhunt:Invalid Params> "+params
        A.cycle
    end if
    counter={"ips_checked":0,"matches_found":0}
    services=["http","ftp","ssh","smtp","repository","employees","students","criminals","router","rshell","bank_account"]
    search=function(service,amount,version)
        core.stopwatch("start")
        A.debug_msg("Service:"+service+" Amount:"+amount.val+" Version:"+version)
        matches=[]
        while matches.len!=amount.val
            ip=A.programs.ip.run(["nmap"]);counter.ips_checked+=1;if A.debug==1 then print core.text("color","#FFFFFF")+"Generating New Network:"+ip
            router=get_router(ip)
            ports=router.used_ports
            if (service=="router" and (router.kernel_version==version or version=="any")) then
                matches.push(ip)
                counter.matches_found+=1
            else
                for port in ports
                    if (router.port_info(port).split(" ")[0]==service and (version=="any" or router.port_info(" ")[1]==version) and matches.indexOf(ip)==null) then
                        matches.push(ip)
                        counter.matches_found+=1
                    end if
                end for
            end if
            print(core.text("color","#FFFFFF")+"Scanned:" + counter.ips_checked + char(10)+core.text("color","#FFFFFF")+"Matches:" + matches.len,1);wait 0.1
        end while
        return matches
    end function
    if mode=="hackshop" then
        service="repository"
        version="any"
        amount="1"
        matches=search(service,amount,version)
        core.stopwatch("stop","to scan " + counter.ips_checked + " networks and find 1 hackshop")
        print core.text("color","#FFFFFF")+matches[0]
        return matches[0]
    else
        amount=user_input(core.text("color","#FFFFFF")+"How Many Do You Want To Find? ")
        service=core.menu(services)
        version=user_input(core.text("color","#FFFFFF")+"Version: ")
        matches=search(service,amount,version)
        print()
        core.stopwatch("stop","to scan " + counter.ips_checked + " networks and core.find " + matches.len+" matches")
        if user_input("Nmap all of them? y/n")=="y" then
            for match in matches;A.programs.nmap.run(["nmap",match]);print char(10);end for;A.cycle
        else
            for match in matches;print core.text("color","#FFFFFF")+match;end for;A.cycle
        end if
    end if
end function
A.programs.htop={"name":"htop","desc":"Task Manager","usg":"XXX","req":"computer"}
A.programs.htop.run=function(params)
    computer=core.req_computer(A.sessions.current)
    monitor=function
        computer.create_folder("/root","cps")
        htop_temp=computer.File("/root/cps/h")
        if not htop_temp then computer.touch("/root/cps","h")
        htop_temp=computer.File("/root/cps/h")
        while core.watch_file("/root/cps/h")==1
            data=core.text("color","#FFFFFF")+"USER PID CPU MEM NAME"
            display=computer.show_procs
            tasks=0
            cpu_load=0.0
            mem_load=0.0
            counter=0
            for item in display.split(char(10))[1:]
                parsedItem = item.split(" ")
                user=parsedItem[0]
                pid=core.text("color","#20ff98")+parsedItem[1]
                cpu=core.text("color","#21bcff")+parsedItem[2]
                cpu_load=cpu_load+parsedItem[2][:-1].val
                mem=core.text("color","#21bcff")+parsedItem[3]
                mem_load=mem_load+parsedItem[3][:-1].val
                command=core.text("color","#20ff98")+parsedItem[4]
                if user=="root" then
                    user=core.text("color","#AA0000")+user+core.text("cap","color")
                else if user=="guest" then
                    user=core.text("color","#FFFFFF")+user+core.text("cap","color")
                else
                    user=core.text("color","#FBFF00")+user+core.text("cap","color")
                end if
                data=data+char(10)+user+" "+pid+" "+cpu+" "+mem+" "+command
                tasks+=1
            end for
            print core.text("color","#FFFFFF")+"Total Storage: "+core.text("color","#FBFF00")+(core.find(computer.File("/")).folders.len+core.find(computer.File("/")).files.len)+"/"+"3,125"+"("+core.text("color","#21bcff")+((core.find(computer.File("/")).folders.len+core.find(computer.File("/")).files.len)/3125)*100+"%)"+char(10)+core.text("color","#FFFFFF")+"Tasks:"+tasks+" "+core.text("color","#FFFFFF")+"CPU Usage:"+core.text("color","#21bcff")+cpu_load+"%"+" "+core.text("color","#FFFFFF")+"Memory Usage:"+core.text("color","#21bcff")+mem_load+"%"+char(10)+core.format(data),1
            wait 1
        end while
        clear_screen
        params=[]
        A.cycle
    end function
    monitor
end function
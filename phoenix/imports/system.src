print "Imported System.src"

sys={}

sys.aircrack={"name":"aircrack","usage":"[file cap]","req":"file"}
sys.aircrack.run=function(params) //TODO Needs Testing
    print "Running Aircrack"
    crypto=cor.crypto
    if params.len!=1 or params[0] == "-h" or params[0]=="--help" then ;sys.man("aireplay");return;end if
    file=bat.current_object.host_computer.File(params[0])
    if not file or not file.is_binary or not file.has_permission("r") then ;print "Aircrack: Can't Process File:"+params[0]+":"+typeof(file).color("ffff00");return;end if
    key=crypto.aircrack(file.path)
    if key then
        print "Found Key:"+key.color(ffffff)
        return
    else
        print "Aircrack: Unable to get key".color("ffff00")
        return
    end if
end function
sys.aireplay={"name":"aireplay","usage":"[-b bssid] [-e essid]","req":"file"}
sys.aireplay.run=function(params) //TODO Needs Testing
    crypto=cor.crypto
    bssid=params[1]
    essid=params[3]
    result=crypto.aireplay(params[1],params[3])
    if typeof(result=="string") then 
        print "Aireplay: "+result.color("ffff00")
        return
    end if
end function
sys.airmon={"name":"airmon","usage":"[start:stop] [net interface]","req":"XXX"}
sys.airmon.run=function(params) //TODO Needs Testing
    crypto=cor.crypto
    computer=cor.req("computer",bat.current_object)
    output="Interface Chipset Monitor_Mode"+char(10)
    if params.len==0 then
        print cor.format(ouput+computer.network_devices)
        bat.run
    end if
    option=params[0]
    device=params[1]
    if option!="start" and option!="stop" then
        sys.man("airmon")
        bat.run
    end if
    ouput=crypto.airmon(option,device)
    if not ouput then
        print "Airmon: "+device+" not found".color("ffff00")
        bat.run
    end if
    if typeof(output)=="string" then
                print "Airmon: "+string.color("ffff00")
        bat.run
    end if
    print cor.format(output)+computer.network_devices
    return
end function
sys.aptget={"name":"aptget","usage":"XXX","req":"XXX"}
sys.aptget.run=function(params) //TODO Needs Testing
    aptclient=cor.apt
    PendingUpdates=function(folderPath)
        pendingUpdate=[]
        targetFolder=bat.current_object.File(folderPath)
        if targetFolder!=null then
            files=targetFolder.get_files
            for itemFile in files
                output=aptclient.check_upgrade(itemFile.path)
                if output==true then pendingUpdate.push(itemFile.name)
            end for
        end if
        return pendingUpdate
    end function
    action=params[0]
    if action=="update" then
        print "Updaing package lists..."
        output=aptclient.update
        if output then print output
    else if action=="install" then
        print "Reading package lists..."
        if params.len<2 then;sys.man("aptget");A.bat.run;end if
        print "Downloading "+params[1]
        customPath=""
        if params.len==3 then customPath=params[2]
        output=aptclient.install(params[1],customPath)
        if output==true then ;print params[1]+" installed";A.bat.run;end if
        print output
    else if action=="search" then
        print aptclient.search(params[1])
    else if action=="show" then
        if params.len!=2 then;sys.man("aptget");A.bat.run;end if
        print aptclient.show(params[1])
    else if action=="addrepo" then
        if params.len<2 or params.len>3 then ;sys.man("aptget");A.bat.run;end if
        port=1542
        if params.len==3 then port=params[2]
        output=aptclient.add_repo(params[1],port)
        if output then;print output;sys.man("aptget");A.bat.run;end if
        print "Repo "+params[1]+" added succesfully. "+char(10) +"Launch aptget with the update option to apply the changes"
    else if action=="delrepo" then
        if params.len!=2 then;sys.man("aptget");A.bat.run;end if
        output=aptclient.del_repo(paramsp[1])
        if output then;print output;sys.man("aptget");A.bat.run;end if
        print "Repo "+params[1]+" removed succesfully"+char(10)+"Launch aptget with the update option to apply the changes"
    else if action=="upgrade" then
        if params.len==1 then
            pendingpackages= PendingUpdates("/lib")+PendingUpdating("/bin")
            if pendingpackages.len==0 then;print "No updated needed";sys.man("aptget");A.bat.run;end if
            print "The following packages will be updated:"
            pkgs=" "
            for itemPackage in pendingpackages
                pkgs=pkgs+" "+itemPackage
            end for
            print pkgs
            option=user_input(char(10)+"Do you want to contine? (y/s): ")
            if option=="y" or option=="yes" then
                counter=0
                for itemPackage in pendingpackages
                    output=aptclient.install(itemPackage)
                    if output==true then
                        counter=counter+1
                    else if output then
                        print output
                    end if
                end for
                print counter+" packages updated"
            else
                print "aborted";sys.man("aptget");A.bat.run
            end if
        else if params.len == 2 then
            output = aptclient.check_upgrade("/lib/" + params[1])
            if typeof(output) == "string" then output = aptclient.check_upgrade("/bin/" + params[1])
            if not output then print("No updates needed");sys.man("aptget");A.bat.run;end if
            if output == true then
                print("The following package will be updated:"+char(10) + params[1])
                option = user_input(char(10)+"Do you want to continue?(y/n): ")
                if option == "y" or option == "yes" then
                    output = aptclient.install(params[1])
                    if output == true then ;print (params[1] + " installed.");sys.man("aptget");A.bat.run;end if
                    print(output)				
                else 
                    print("aborted");sys.man("aptget");A.bat.run
                end if
            else
                print output;sys.man("aptget");A.bat.run
        end if
    else
        sys.man("aptget");A.bat.run
    end if
end function
sys.build={"name":"build","usage":"[file_source_code] [path_new_program]","req":"shell"}
sys.build.run=function(params) //TODO Needs Testing
    if params.len != 2 then
        sys.man("build")
        A.bat.run
    else
        pathSource = params[0]
        programPath = params[1]
        shell=cor.req("shell",bat.current_object)
        computer = shell.host_computer
        fileSource = computer.File(pathSource)
        folderDest = computer.File(programPath)

        if fileSource == null then ;print ("build: can't find "+ pathSource).color("ffff00");sys.man("build");A.bat.run;end if
        if folderDest == null then ;print ("build: can't find " + programPath).color("ffff00");sys.man("build");A.bat.run;end if
        
        output = shell.build(fileSource.path, folderDest.path)
        if output.len == 0 then
            print("build successful.")
        else
            print(output)
        end if
    end if
end function
sys.cat={"name":"cat","usage":"[file]","req":"computer"}
sys.cat.run=function(params)
    if params.len != 1 or params[0] == "-h" or params[0] == "--help" then ;sys.man("cat");A.bat.run;end if
    pathFile = params[0]
    file = cor.req("computer",bat.current_object).File(pathFile)
    print bat.path
    if file ==null then file=cor.req("computer",bat.current_object).File(bat.path+"/"+pathFile)
    if file == null then ;print("cat: file not found: "+pathFile);bat.run;end if
    if file.is_binary then ;print("cat: can't open " + file.path + ". Binary file");bat.run;end if
    if not file.has_permission("r") then ;print("cat: permission denied");bat.run;end if
    print(file.get_content)
    bat.run
end function
sys.cd={"name":"cd","usage":"XXX","req":"XXX"}
sys.cd.run=function(params)
    pathFile=home_dir
    if params.len>0 then
        pathFile=get_abs_path(params[0])
    end if
    bat.path=pathFile
    bat.run
end function
sys.chgrp={"name":"chgrp","usage":"[opt:-R] [new group] [path file/folder]","req":"XXX"}
sys.chgrp.run=function(params)
end function
sys.chmod={"name":"chmod","usage":"[opt:-R] [u,g,o+wrx] [path file/folder]","req":"XXX"}
sys.chmod.run=function(params)
end function
sys.chown={"name":"chown","usage":"[opt:-R] [owner] [path file/folder]","req":"XXX"}
sys.chown.run=function(params)
end function
sys.cp={"name":"cp","usage":"[path to file] [path to copy]","req":"XXX"}
sys.cp.run=function(params)
end function
sys.ftp={"name":"ftp","usage":"[user@password] [ip address]","req":"XXX"}
sys.ftp.run=function(params)
end function
sys.groupadd={"name":"groupadd","usage":"[user] [new group]","req":"XXX"}
sys.groupadd.run=function(params)
end function
sys.groupdel={"name":"groupdel","usage":"[user] [group]","req":"XXX"}
sys.groupdel.run=function(params)
end function
sys.groups={"name":"groups","usage":"[username]","req":"XXX"}
sys.groups.run=function(params)
end function
sys.ifconfig={"name":"ifconfig","usage":"[net interface] [ip address] gateway [ip address]","req":"XXX"}
sys.ifconfig.run=function(params)
end function
sys.iwconfig={"name":"iwconfig","usage":"XXX","req":"XXX"}
sys.iwconfig.run=function(params)
end function
sys.iwlist={"name":"iwlist","usage":"[net device]","req":"XXX"}
sys.iwlist.run=function(params)
end function
sys.kill={"name":"kill","usage":"[PID]","req":"XXX"}
sys.kill.run=function(params)
end function
sys.ln={"name":"ln","usage":"[path file] [path to link]","req":"XXX"}
sys.ln.run=function(params)
end function
sys.ls={"name":"ls","usage":"[opt:-l, -a, -la] [opt: path]","req":"XXX"}
sys.ls.run=function(params)
end function
sys.man={"name":"man","usage":"[command]","req":"XXX"}
sys.man.run=function(params)
    print "Usage".bold+": "+sys[params[0]].name.bold+" "+sys[params[0]].usage.bold
end function
sys.mkdir={"name":"mkdir","usage":"[path to new folder]","req":"XXX"}
sys.mkdir.run=function(params)
end function
sys.mv={"name":"mv","usage":"[path to file] [path to new folder]","req":"XXX"}
sys.mv.run=function(params)
end function
sys.nslookup={"name":"nslookup","usage":"[web address]","req":"XXX"}
sys.nslookup.run=function(params)
end function
sys.passwd={"name":"passwd","usage":"[username]","req":"XXX"}
sys.passwd.run=function(params)
end function
sys.ping={"name":"ping","usage":"[ip address]","req":"XXX"}
sys.ping.run=function(params)
end function
sys.ps={"name":"ps","usage":"ps","req":"XXX"}
sys.ps.run=function(params)
end function
sys.pwd={"name":"pwd","usage":"pwd","req":"XXX"}
sys.pwd.run=function(params)
end function
sys.reboot={"name":"reboot","usage":"[-sm]","req":"XXX"}
sys.reboot.run=function(params)
    if params.len > 0 and (params[0] == "-h" or params[0] == "-help") then ;sys.man("reboot");bat.run;end if
    isSafeMode = params.len > 0 and params[0] == "-sm"
    output = cor.req("computer",bat.current_object).reboot(isSafeMode)
    if output and output != 1 then 
        print(output)
    else 
        print("Closing programs...\nRestarting...")
    end if
end function
sys.rm={"name":"rm","usage":"[file]","req":"XXX"}
sys.rm.run=function(params)
end function
sys.rmdir={"name":"rmdir","usage":"XXX","req":"XXX"}
sys.rmdir.run=function(params)
end function
sys.scp={"name":"scp","usage":"-d [path to source file/folder] [path to destination file/folder] or -u [path to source file/folder] [path to destination file/folder]","req":"XXX"}
sys.scp.run=function(params)
end function
sys.ssh={"name":"ssh","usage":"[user@password] [ip address] [(opt) port]","req":"XXX"}
sys.ssh.run=function(params)
end function
sys.sudo={"name":"sudo","usage":"[opt:-s] [command] or -u [username]","req":"XXX"}
sys.sudo.run=function(params)
end function
sys.touch={"name":"touch","usage":"[path_new_file]","req":"XXX"}
sys.touch.run=function(params)
end function
sys.useradd={"name":"useradd","usage":"[new username]","req":"XXX"}
sys.useradd.run=function(params)
end function
sys.userdel={"name":"userdel","usage":"[opt:-r] [username]","req":"XXX"}
sys.userdel.run=function(params)
end function
sys.whoami={"name":"whoami","usage":"whoami","req":"XXX"}
sys.whoami.run=function(params)
end function
sys.whois={"name":"whois","usage":"[public IP address]","req":"XXX"}
sys.whois.run=function(params)
end function